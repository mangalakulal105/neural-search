/*
 *  Copyright OpenSearch Contributors
 *  SPDX-License-Identifier: Apache-2.0
 */

import org.opensearch.gradle.testclusters.StandaloneRestIntegTestTask
import org.apache.tools.ant.taskdefs.condition.Os

import java.util.concurrent.Callable

apply from : "$rootDir/qa/build.gradle"

String default_bwc_version = System.getProperty("bwc.version")
String neural_search_bwc_version = System.getProperty("tests.bwc.version", default_bwc_version)
boolean isSnapshot = neural_search_bwc_version.contains("-SNAPSHOT")
String knn_bwc_version_no_qualifier = isSnapshot ? neural_search_bwc_version - "-SNAPSHOT" : neural_search_bwc_version
String baseName = "neuralSearchBwcCluster-rolling"

List<Provider<RegularFile>> plugins = [provider(new Callable<RegularFile>(){
    @Override
    RegularFile call() throws Exception {
        return new RegularFile() {
            @Override
            File getAsFile() {
                return configurations.zipArchive.asFileTree.matching{include "**/opensearch-ml-plugin-${opensearch_build}.zip"}.getSingleFile()
            }
        }
    }
}), provider(new Callable<RegularFile>(){
    @Override
    RegularFile call() throws Exception {
        return new RegularFile() {
            @Override
            File getAsFile() {
                return configurations.zipArchive.asFileTree.matching{include "**/opensearch-knn-${opensearch_build}.zip"}.getSingleFile()
            }
        }
    }
}), rootProject.tasks.bundlePlugin.archiveFile]

// Creates a test cluster of previous version and loads k-NN plugin of bwcVersion
testClusters {
    "${baseName}" {
        testDistribution = "ARCHIVE"
        versions = [neural_search_bwc_version, opensearch_version]
        numberOfNodes = 3
        plugin(project.tasks.zipBwcMlCommonsPlugin.archiveFile)
        plugin(project.tasks.zipBwcKnnPlugin.archiveFile)
        plugin(project.tasks.zipBwcPlugin.archiveFile)
        jvmArgs("-Xms1g", "-Xmx4g")
        setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
        setting 'http.content_type.required', 'true'
        environment "LD_LIBRARY_PATH", "${buildDir}/testclusters/${baseName}-0/distro/${knn_bwc_version_no_qualifier}-ARCHIVE/plugins/opensearch-knn/knnlib;${buildDir}/testclusters/${baseName}-0/distro/${knn_bwc_version_no_qualifier}-ARCHIVE/plugins/opensearch-knn/lib"
        systemProperty "java.library.path", "${buildDir}/testclusters/${baseName}-0/distro/${knn_bwc_version_no_qualifier}-ARCHIVE/plugins/opensearch-knn/knnlib:${buildDir}/testclusters/${baseName}-0/distro/${knn_bwc_version_no_qualifier}-ARCHIVE/plugins/opensearch-knn/lib"
    }
}


// Task to run BWC tests against the old cluster
task testAgainstOldCluster(type: StandaloneRestIntegTestTask) {
    dependsOn "zipBwcPlugin"
    useCluster testClusters."${baseName}"
    systemProperty 'tests.rest.bwcsuite_cluster', 'old_cluster'
    systemProperty 'tests.plugin_bwc_version', neural_search_bwc_version
    systemProperty 'tests.skip_delete_model_index', 'true'
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of rolling upgrade. Upgrades one node of the old cluster to new OpenSearch version with upgraded plugin version
// This results in a mixed cluster with 2 nodes on the old version and 1 upgraded node.
task testAgainstOneThirdUpgradedCluster(type: StandaloneRestIntegTestTask) {
    useCluster testClusters."${baseName}"
    dependsOn rootProject.tasks.assemble
    dependsOn "testAgainstOldCluster"
    doFirst {
        testClusters."${baseName}".upgradeNodeAndPluginToNextVersion(plugins)
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'mixed_cluster'
    systemProperty 'tests.rest.first_round', 'true'
    systemProperty 'tests.skip_delete_model_index', 'true'
    systemProperty 'tests.plugin_bwc_version', neural_search_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of rolling upgrade. Upgrades the second node to new OpenSearch version with upgraded plugin version after the
// first node is upgraded. This results in a mixed cluster with 1 node on the old version and 2 upgraded nodes.
task testAgainstTwoThirdsUpgradedCluster(type: StandaloneRestIntegTestTask) {
    dependsOn "testAgainstOneThirdUpgradedCluster"
    useCluster testClusters."${baseName}"
    doFirst {
        testClusters."${baseName}".upgradeNodeAndPluginToNextVersion(plugins)
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'mixed_cluster'
    systemProperty 'tests.rest.first_round', 'false'
    systemProperty 'tests.skip_delete_model_index', 'true'
    systemProperty 'tests.plugin_bwc_version', neural_search_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of rolling upgrade. Upgrades the third node to new OpenSearch version with upgraded plugin version after the
// second node is upgraded. This results in a fully upgraded cluster.
task testRollingUpgrade(type: StandaloneRestIntegTestTask) {
    dependsOn "testAgainstTwoThirdsUpgradedCluster"
    useCluster testClusters."${baseName}"
    doFirst {
        testClusters."${baseName}".upgradeNodeAndPluginToNextVersion(plugins)
    }
    mustRunAfter "testAgainstOneThirdUpgradedCluster"
    systemProperty 'tests.rest.bwcsuite_cluster', 'upgraded_cluster'
    systemProperty 'tests.skip_delete_model_index', 'true'
    systemProperty 'tests.plugin_bwc_version', neural_search_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}